// Generated by CoffeeScript 1.12.7
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  com.wintondeshong.models.Contact = (function(superClass) {
    extend(Contact, superClass);

    function Contact() {
      this._validateName = bind(this._validateName, this);
      this._validateMessage = bind(this._validateMessage, this);
      this._validateEmail = bind(this._validateEmail, this);
      this.setName = bind(this.setName, this);
      this.setMessage = bind(this.setMessage, this);
      this.setEmail = bind(this.setEmail, this);
      this.getName = bind(this.getName, this);
      this.getMessage = bind(this.getMessage, this);
      this.getEmail = bind(this.getEmail, this);
      this.validate = bind(this.validate, this);
      return Contact.__super__.constructor.apply(this, arguments);
    }

    Contact.prototype.defaults = {
      name: '',
      email: '',
      message: ''
    };

    Contact.prototype.url = '/contact_send';

    Contact.prototype.validate = function(attrs) {
      var attr, attrCap, attrValidation, hasErrors, ref, value;
      hasErrors = false;
      ref = this.attributes;
      for (attr in ref) {
        value = ref[attr];
        attrCap = _(attr).capitalize();
        attrValidation = this["_validate" + attrCap]();
        if (attrValidation === true) {
          this.trigger("valid:" + attr, {
            type: attr,
            message: attr + " is valid"
          });
        } else {
          this.trigger("invalid:" + attr, {
            type: attr,
            message: attrValidation
          });
          hasErrors = true;
        }
      }
      return hasErrors;
    };

    Contact.prototype.getEmail = function() {
      return this.get('email');
    };

    Contact.prototype.getMessage = function() {
      return this.get('message');
    };

    Contact.prototype.getName = function() {
      return this.get('name');
    };

    Contact.prototype.setEmail = function(email) {
      return this.set('email', $.trim(email));
    };

    Contact.prototype.setMessage = function(message) {
      return this.set('message', $.trim(message));
    };

    Contact.prototype.setName = function(name) {
      return this.set('name', $.trim(name));
    };

    Contact.prototype._validateEmail = function() {
      var email;
      email = this.getEmail();
      if (_(email).isEmpty()) {
        return 'email is required';
      }
      return true;
    };

    Contact.prototype._validateMessage = function() {
      var message;
      message = this.getMessage();
      if (_(message).isEmpty()) {
        return 'message is required';
      }
      return true;
    };

    Contact.prototype._validateName = function() {
      var name;
      name = this.getName();
      if (_(name).isEmpty()) {
        return 'name is required';
      }
      return true;
    };

    return Contact;

  })(Backbone.Model);

}).call(this);
