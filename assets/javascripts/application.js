// Generated by CoffeeScript 1.12.7
(function() {
  var namespace,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  namespace = com.wintondeshong;

  namespace.App = (function(superClass) {
    extend(App, superClass);

    function App() {
      this._handleRoute = bind(this._handleRoute, this);
      this._getViewNameFromRoute = bind(this._getViewNameFromRoute, this);
      this.initialize = bind(this.initialize, this);
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype._currentView = null;

    App.prototype._$container = null;

    App.prototype.routes = {
      '*path': '_handleRoute'
    };

    App.prototype.initialize = function(options) {
      console.log("App.Router start");
      this._$container = $('#application-shell');
      namespace.app.templates = new namespace.TemplateManager();
      namespace.app.templates.initialize();
      return Backbone.history.start();
    };

    App.prototype._getViewNameFromRoute = function() {
      var route;
      route = window.location.pathname.replace('/', '');
      if (_(route).isEmpty()) {
        return "MainView";
      } else {
        return route.charAt(0).toUpperCase() + route.slice(1) + "View";
      }
    };

    App.prototype._handleRoute = function() {
      var viewClass, viewName;
      viewName = this._getViewNameFromRoute();
      viewClass = namespace.views[viewName];
      if (viewClass) {
        this._currentView = new viewClass();
        return this._$container.html(this._currentView.render().$el);
      }
    };

    return App;

  })(Backbone.Router);

}).call(this);
